// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportApp.ProductsServices.Infrastructure.EntityFramework;

#nullable disable

namespace SportApp.ProductsServices.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(ProductServiceContext))]
    [Migration("20240505045059_AlterTrainingtablesRelations")]
    partial class AlterTrainingtablesRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Activities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Activities", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Activities.ProductServiceActivities", b =>
                {
                    b.Property<Guid>("ProductServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductServiceId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ProductServiceActivities", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Allergies.NutritionalAllergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("NutritionalAllergies", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Allergies.ProductServiceNutritionalAllergies", b =>
                {
                    b.Property<Guid>("ProductServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NutritionalAllergyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductServiceId", "NutritionalAllergyId");

                    b.HasIndex("NutritionalAllergyId");

                    b.ToTable("ProductServiceNutritionalAllergies", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Goals.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Goals", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Goals.NutritionalPlanGoals", b =>
                {
                    b.Property<Guid>("NutritionalPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NutritionalPlanId", "GoalId");

                    b.HasIndex("GoalId");

                    b.ToTable("NutritionalPlanGoals", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Goals.ProductServiceGoals", b =>
                {
                    b.Property<Guid>("ProductServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductServiceId", "GoalId");

                    b.HasIndex("GoalId");

                    b.ToTable("ProductServiceGoals", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Nutrition.Day", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<Guid?>("NutritionalPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("NutritionalPlanId");

                    b.ToTable("Days", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Nutrition.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Calories")
                        .HasColumnType("int")
                        .HasColumnName("Calories");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<Guid>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Description");

                    b.Property<string>("DishType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("DishType");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Picture");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.ToTable("Meals", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Nutrition.NutritionalPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("NutritionalPlans", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Nutrition.NutritionalPlanUserNutritionalPlans", b =>
                {
                    b.Property<Guid>("NutritionalPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserNutritionalPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NutritionalPlanId", "UserNutritionalPlanId");

                    b.HasIndex("UserNutritionalPlanId");

                    b.ToTable("NutritionalPlanUserNutritionalPlans", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Nutrition.UserNutritionalPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<Guid>("SubscribedUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserNutritionalPlan");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.ProductService.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Description");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b56a2dd5-fbca-4892-9a4e-b621c40f83ec"),
                            CreatedAt = new DateTime(2024, 5, 5, 4, 50, 58, 918, DateTimeKind.Utc).AddTicks(1261),
                            CreatedBy = new Guid("3bfc0e87-e3bb-46b4-9f0a-b0d264fcd6b6"),
                            Description = "This is the default category",
                            Enabled = true,
                            Name = "Default Category",
                            UpdatedAt = new DateTime(2024, 5, 5, 4, 50, 58, 918, DateTimeKind.Utc).AddTicks(1263),
                            UpdatedBy = new Guid("3bfc0e87-e3bb-46b4-9f0a-b0d264fcd6b6")
                        },
                        new
                        {
                            Id = new Guid("be8e2306-8bc9-49cc-8d43-a76820370994"),
                            CreatedAt = new DateTime(2024, 5, 5, 4, 50, 58, 918, DateTimeKind.Utc).AddTicks(1266),
                            CreatedBy = new Guid("3bfc0e87-e3bb-46b4-9f0a-b0d264fcd6b6"),
                            Description = "Categoría para eventos de todo tipo",
                            Enabled = true,
                            Name = "Eventos",
                            UpdatedAt = new DateTime(2024, 5, 5, 4, 50, 58, 918, DateTimeKind.Utc).AddTicks(1267),
                            UpdatedBy = new Guid("3bfc0e87-e3bb-46b4-9f0a-b0d264fcd6b6")
                        },
                        new
                        {
                            Id = new Guid("a649e6a9-f667-4e73-b8b6-3816c7e554eb"),
                            CreatedAt = new DateTime(2024, 5, 5, 4, 50, 58, 918, DateTimeKind.Utc).AddTicks(1269),
                            CreatedBy = new Guid("3bfc0e87-e3bb-46b4-9f0a-b0d264fcd6b6"),
                            Description = "Categoría para productos de todo tipo",
                            Enabled = true,
                            Name = "Productos",
                            UpdatedAt = new DateTime(2024, 5, 5, 4, 50, 58, 918, DateTimeKind.Utc).AddTicks(1269),
                            UpdatedBy = new Guid("3bfc0e87-e3bb-46b4-9f0a-b0d264fcd6b6")
                        },
                        new
                        {
                            Id = new Guid("60d40a85-78ca-4b75-b75f-76cee4896ead"),
                            CreatedAt = new DateTime(2024, 5, 5, 4, 50, 58, 918, DateTimeKind.Utc).AddTicks(1272),
                            CreatedBy = new Guid("3bfc0e87-e3bb-46b4-9f0a-b0d264fcd6b6"),
                            Description = "Categoría para servicios de todo tipo",
                            Enabled = true,
                            Name = "Servicios",
                            UpdatedAt = new DateTime(2024, 5, 5, 4, 50, 58, 918, DateTimeKind.Utc).AddTicks(1272),
                            UpdatedBy = new Guid("3bfc0e87-e3bb-46b4-9f0a-b0d264fcd6b6")
                        },
                        new
                        {
                            Id = new Guid("03388722-321f-4b6a-963e-104eb73d17c2"),
                            CreatedAt = new DateTime(2024, 5, 5, 4, 50, 58, 918, DateTimeKind.Utc).AddTicks(1275),
                            CreatedBy = new Guid("3bfc0e87-e3bb-46b4-9f0a-b0d264fcd6b6"),
                            Description = "Categoría para planes de todo tipo",
                            Enabled = true,
                            Name = "Planes",
                            UpdatedAt = new DateTime(2024, 5, 5, 4, 50, 58, 918, DateTimeKind.Utc).AddTicks(1275),
                            UpdatedBy = new Guid("3bfc0e87-e3bb-46b4-9f0a-b0d264fcd6b6")
                        });
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.ProductService.GeographicInfo.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.ProductService.GeographicInfo.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.ProductService.GeographicInfo.GeographicInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("GeographicInfo");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.ProductService.GeographicInfo.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.ProductService.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Description");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<long>("Price")
                        .HasMaxLength(50)
                        .HasColumnType("bigint")
                        .HasColumnName("Price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Plans", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("672d4087-ac82-42b5-846e-64905d1a09b3"),
                            CreatedAt = new DateTime(2024, 5, 5, 4, 50, 58, 919, DateTimeKind.Utc).AddTicks(255),
                            CreatedBy = new Guid("3bfc0e87-e3bb-46b4-9f0a-b0d264fcd6b6"),
                            Description = "Basic Plan",
                            Enabled = true,
                            Name = "Basic",
                            Price = 0L,
                            UpdatedAt = new DateTime(2024, 5, 5, 4, 50, 58, 919, DateTimeKind.Utc).AddTicks(258),
                            UpdatedBy = new Guid("3bfc0e87-e3bb-46b4-9f0a-b0d264fcd6b6")
                        },
                        new
                        {
                            Id = new Guid("2c312559-173d-4239-a03d-2fdb3f219fa5"),
                            CreatedAt = new DateTime(2024, 5, 5, 4, 50, 58, 919, DateTimeKind.Utc).AddTicks(261),
                            CreatedBy = new Guid("3bfc0e87-e3bb-46b4-9f0a-b0d264fcd6b6"),
                            Description = "Intermediate Plan",
                            Enabled = true,
                            Name = "Intermediate",
                            Price = 50L,
                            UpdatedAt = new DateTime(2024, 5, 5, 4, 50, 58, 919, DateTimeKind.Utc).AddTicks(261),
                            UpdatedBy = new Guid("3bfc0e87-e3bb-46b4-9f0a-b0d264fcd6b6")
                        },
                        new
                        {
                            Id = new Guid("7ee7db76-77c2-4353-a509-ebe4fbe4aed4"),
                            CreatedAt = new DateTime(2024, 5, 5, 4, 50, 58, 919, DateTimeKind.Utc).AddTicks(264),
                            CreatedBy = new Guid("3bfc0e87-e3bb-46b4-9f0a-b0d264fcd6b6"),
                            Description = "Premium Plan",
                            Enabled = true,
                            Name = "Premium",
                            Price = 150L,
                            UpdatedAt = new DateTime(2024, 5, 5, 4, 50, 58, 919, DateTimeKind.Utc).AddTicks(264),
                            UpdatedBy = new Guid("3bfc0e87-e3bb-46b4-9f0a-b0d264fcd6b6")
                        });
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.ProductService.ProductService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("")
                        .HasColumnName("Description");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GeographicInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<Guid?>("NutritionalPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Price")
                        .HasMaxLength(50)
                        .HasColumnType("bigint")
                        .HasColumnName("Price");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SportLevel")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("SportLevel");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TrainingPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TypeOfNutritionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("GeographicInfoId");

                    b.HasIndex("NutritionalPlanId");

                    b.HasIndex("PlanId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("TrainingPlanId");

                    b.HasIndex("TypeOfNutritionId");

                    b.ToTable("ProductServices", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.ProductService.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Description");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ServiceType", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.ProductService.TypeOfNutrition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("TypeOfNutrition", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Subscription.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.Property<Guid>("User")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("User");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Training.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Description");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Picture");

                    b.Property<int>("Repeats")
                        .HasColumnType("int")
                        .HasColumnName("Repeats");

                    b.Property<int>("Sets")
                        .HasColumnType("int")
                        .HasColumnName("Sets");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.Property<long?>("Weight")
                        .HasColumnType("bigint")
                        .HasColumnName("Weight");

                    b.HasKey("Id");

                    b.HasIndex("TrainingId");

                    b.ToTable("Exercises", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Training.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Description");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<Guid?>("TrainingPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("TrainingPlanId");

                    b.ToTable("Trainings", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Training.TrainingPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<int>("EndAge")
                        .HasColumnType("int")
                        .HasColumnName("EndAge");

                    b.Property<int>("StartAge")
                        .HasColumnType("int")
                        .HasColumnName("StartAge");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("TrainingPlans", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Training.TrainingPlanUserTrainingPlans", b =>
                {
                    b.Property<Guid>("TrainingPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserTrainingPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TrainingPlanId", "UserTrainingPlanId");

                    b.HasIndex("UserTrainingPlanId");

                    b.ToTable("TrainingPlanUserTrainingPlans", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Training.UserTrainingPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Enabled");

                    b.Property<Guid>("SubscribedUser")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SubscribedUser");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("UserTrainingPlans", (string)null);
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Activities.ProductServiceActivities", b =>
                {
                    b.HasOne("SportApp.ProductsServices.Domain.Activities.Activity", "Activity")
                        .WithMany("ProductServiceActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportApp.ProductsServices.Domain.ProductService.ProductService", "ProductService")
                        .WithMany("ProductServiceActivities")
                        .HasForeignKey("ProductServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("ProductService");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Allergies.ProductServiceNutritionalAllergies", b =>
                {
                    b.HasOne("SportApp.ProductsServices.Domain.Allergies.NutritionalAllergy", "NutritionalAllergy")
                        .WithMany("ProductServiceAllergies")
                        .HasForeignKey("NutritionalAllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportApp.ProductsServices.Domain.ProductService.ProductService", "ProductService")
                        .WithMany("ProductServiceAllergies")
                        .HasForeignKey("ProductServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutritionalAllergy");

                    b.Navigation("ProductService");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Goals.NutritionalPlanGoals", b =>
                {
                    b.HasOne("SportApp.ProductsServices.Domain.Goals.Goal", "Goal")
                        .WithMany("NutritionalPlanGoals")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportApp.ProductsServices.Domain.Nutrition.NutritionalPlan", "NutritionalPlan")
                        .WithMany("NutritionalPlanGoals")
                        .HasForeignKey("NutritionalPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("NutritionalPlan");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Goals.ProductServiceGoals", b =>
                {
                    b.HasOne("SportApp.ProductsServices.Domain.Goals.Goal", "Goal")
                        .WithMany("ProductServiceGoals")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportApp.ProductsServices.Domain.ProductService.ProductService", "ProductService")
                        .WithMany("ProductServiceGoals")
                        .HasForeignKey("ProductServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("ProductService");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Nutrition.Day", b =>
                {
                    b.HasOne("SportApp.ProductsServices.Domain.Nutrition.NutritionalPlan", null)
                        .WithMany("Day")
                        .HasForeignKey("NutritionalPlanId");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Nutrition.Meal", b =>
                {
                    b.HasOne("SportApp.ProductsServices.Domain.Nutrition.Day", null)
                        .WithMany("Meal")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Nutrition.NutritionalPlanUserNutritionalPlans", b =>
                {
                    b.HasOne("SportApp.ProductsServices.Domain.Nutrition.NutritionalPlan", "NutritionalPlan")
                        .WithMany("NutritionalPlanUserNutritionalPlans")
                        .HasForeignKey("NutritionalPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportApp.ProductsServices.Domain.Nutrition.UserNutritionalPlan", "UserNutritionalPlan")
                        .WithMany("NutritionalPlanUserNutritionalPlans")
                        .HasForeignKey("UserNutritionalPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutritionalPlan");

                    b.Navigation("UserNutritionalPlan");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.ProductService.GeographicInfo.City", b =>
                {
                    b.HasOne("SportApp.ProductsServices.Domain.ProductService.GeographicInfo.State", null)
                        .WithMany("City")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.ProductService.GeographicInfo.State", b =>
                {
                    b.HasOne("SportApp.ProductsServices.Domain.ProductService.GeographicInfo.Country", null)
                        .WithMany("State")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.ProductService.ProductService", b =>
                {
                    b.HasOne("SportApp.ProductsServices.Domain.ProductService.GeographicInfo.GeographicInfo", "GeographicInfo")
                        .WithMany()
                        .HasForeignKey("GeographicInfoId");

                    b.HasOne("SportApp.ProductsServices.Domain.Nutrition.NutritionalPlan", "NutritionalPlan")
                        .WithMany()
                        .HasForeignKey("NutritionalPlanId");

                    b.HasOne("SportApp.ProductsServices.Domain.ProductService.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportApp.ProductsServices.Domain.ProductService.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportApp.ProductsServices.Domain.Training.TrainingPlan", "TrainingPlan")
                        .WithMany()
                        .HasForeignKey("TrainingPlanId");

                    b.HasOne("SportApp.ProductsServices.Domain.ProductService.TypeOfNutrition", "TypeOfNutrition")
                        .WithMany()
                        .HasForeignKey("TypeOfNutritionId");

                    b.Navigation("GeographicInfo");

                    b.Navigation("NutritionalPlan");

                    b.Navigation("Plan");

                    b.Navigation("ServiceType");

                    b.Navigation("TrainingPlan");

                    b.Navigation("TypeOfNutrition");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.ProductService.ServiceType", b =>
                {
                    b.HasOne("SportApp.ProductsServices.Domain.ProductService.Category", "Category")
                        .WithMany("ServiceType")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Subscription.Subscription", b =>
                {
                    b.HasOne("SportApp.ProductsServices.Domain.ProductService.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Training.Exercise", b =>
                {
                    b.HasOne("SportApp.ProductsServices.Domain.Training.Training", null)
                        .WithMany("Exercise")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Training.Training", b =>
                {
                    b.HasOne("SportApp.ProductsServices.Domain.Training.TrainingPlan", null)
                        .WithMany("Training")
                        .HasForeignKey("TrainingPlanId");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Training.TrainingPlanUserTrainingPlans", b =>
                {
                    b.HasOne("SportApp.ProductsServices.Domain.Training.TrainingPlan", "TrainingPlan")
                        .WithMany("TrainingPlanUserTrainingPlans")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportApp.ProductsServices.Domain.Training.UserTrainingPlan", "UserTrainingPlan")
                        .WithMany("TrainingPlanUserTrainingPlans")
                        .HasForeignKey("UserTrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingPlan");

                    b.Navigation("UserTrainingPlan");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Activities.Activity", b =>
                {
                    b.Navigation("ProductServiceActivities");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Allergies.NutritionalAllergy", b =>
                {
                    b.Navigation("ProductServiceAllergies");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Goals.Goal", b =>
                {
                    b.Navigation("NutritionalPlanGoals");

                    b.Navigation("ProductServiceGoals");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Nutrition.Day", b =>
                {
                    b.Navigation("Meal");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Nutrition.NutritionalPlan", b =>
                {
                    b.Navigation("Day");

                    b.Navigation("NutritionalPlanGoals");

                    b.Navigation("NutritionalPlanUserNutritionalPlans");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Nutrition.UserNutritionalPlan", b =>
                {
                    b.Navigation("NutritionalPlanUserNutritionalPlans");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.ProductService.Category", b =>
                {
                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.ProductService.GeographicInfo.Country", b =>
                {
                    b.Navigation("State");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.ProductService.GeographicInfo.State", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.ProductService.ProductService", b =>
                {
                    b.Navigation("ProductServiceActivities");

                    b.Navigation("ProductServiceAllergies");

                    b.Navigation("ProductServiceGoals");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Training.Training", b =>
                {
                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Training.TrainingPlan", b =>
                {
                    b.Navigation("Training");

                    b.Navigation("TrainingPlanUserTrainingPlans");
                });

            modelBuilder.Entity("SportApp.ProductsServices.Domain.Training.UserTrainingPlan", b =>
                {
                    b.Navigation("TrainingPlanUserTrainingPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
